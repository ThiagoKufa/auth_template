// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"fmt"
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
	"server_kufatech/internal/config"
	"server_kufatech/internal/handlers"
	"server_kufatech/internal/interfaces/repository"
	"server_kufatech/internal/interfaces/service"
	repository2 "server_kufatech/internal/repository"
	"server_kufatech/internal/services"
	"server_kufatech/pkg/auth"
	"server_kufatech/pkg/database"
	"server_kufatech/pkg/logger"
)

// Injectors from wire.go:

// InitializeContainer inicializa o container de dependÃªncias
func InitializeContainer(cfg *config.Config) (*Container, error) {
	loggerLogger := logger.NewLogger(cfg)
	db, err := database.NewDB(cfg)
	if err != nil {
		return nil, err
	}
	client := provideRedis(cfg)
	userRepository := provideUserRepository(db)
	tokenManager := provideTokenManager(cfg)
	tokenBlacklist := provideTokenBlacklist(client)
	authService := provideAuthService(userRepository, tokenManager, tokenBlacklist, cfg)
	authHandler := handlers.NewAuthHandler(authService, loggerLogger)
	healthHandler := handlers.NewHealthHandler(db)
	container := &Container{
		Config:         cfg,
		Logger:         loggerLogger,
		DB:             db,
		Redis:          client,
		UserRepo:       userRepository,
		TokenManager:   tokenManager,
		TokenBlacklist: tokenBlacklist,
		AuthService:    authService,
		AuthHandler:    authHandler,
		HealthHandler:  healthHandler,
	}
	return container, nil
}

// wire.go:

var containerSet = wire.NewSet(logger.NewLogger, database.NewDB, provideRedis,
	provideUserRepository,
	provideTokenManager,
	provideTokenBlacklist,
	provideAuthService, handlers.NewAuthHandler, handlers.NewHealthHandler, wire.Struct(new(Container), "*"),
)

func provideRedis(cfg *config.Config) *redis.Client {
	return redis.NewClient(&redis.Options{
		Addr:     fmt.Sprintf("%s:%d", cfg.Redis.Host, cfg.Redis.Port),
		Password: cfg.Redis.Password,
		DB:       cfg.Redis.DB,
		PoolSize: cfg.Redis.PoolSize,
	})
}

func provideUserRepository(db *gorm.DB) repository.UserRepository {
	return repository2.NewUserRepository(db)
}

func provideTokenManager(cfg *config.Config) *auth.TokenManager {
	return auth.NewTokenManager(
		cfg.Auth.AccessTokenSecret,
		cfg.Auth.RefreshTokenSecret,
		cfg.Auth.AccessTokenTTL,
		cfg.Auth.RefreshTokenTTL,
	)
}

func provideTokenBlacklist(redis2 *redis.Client) *services.TokenBlacklist {
	return services.NewTokenBlacklist(redis2)
}

func provideAuthService(
	userRepo repository.UserRepository,
	tokenManager *auth.TokenManager,
	tokenBlacklist *services.TokenBlacklist,
	cfg *config.Config,
) service.AuthService {
	return services.NewAuthService(userRepo, tokenManager, tokenBlacklist, cfg)
}
